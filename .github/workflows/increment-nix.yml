name: increment version

on:
  workflow_call:
    inputs:
      shell:
        description: the development shell to use for a dev environment
        required: true
        type: string
      language:
        description: the language to target for the version increment
        required: true
        type: string

jobs:
  increment:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install nix
        uses: cachix/install-nix-action@v31.6.1
        with:
            nix_path: nixpkgs=channel:nixos-unstable
      - name: activate nix shell
        uses: nicknovitski/nix-develop@v1.2.0
        with:
          arguments: "github:c4patino/nixos-config#${{ inputs.shell }}"
      - name: determine pr merge or direct push
        id: pr-merge
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.event.head_commit.message }}" == "Merge pull request"* ]]; then
            echo "pr_merge=true" >> $GITHUB_OUTPUT
          else
            echo "pr_merge=false" >> $GITHUB_OUTPUT
          fi
      - name: get PR tags
        id: get_pr_tags
        if: steps.pr-merge.outputs.pr_merge == 'true'
        run: |
          PR_NUMBER=$(echo "${{ github.event.head_commit.message }}" | grep -oP '#\K\d+')
          if [ -z "$PR_NUMBER" ]; then
            echo "tags=" >> $GITHUB_OUTPUT
            exit 0
          fi
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          PR_LABELS=$(echo "$PR_DATA" | jq -r '.labels[].name' | tr '\n' ' ')
          echo "tags=$PR_LABELS" >> $GITHUB_OUTPUT

      - name: determine version bump type
        id: version-type
        run: |
          pr_merge="${{ steps.pr-merge.outputs.pr_merge }}"
          bump_type="patch"

          if [ "$pr_merge" == "true" ]; then
            tags="${{ steps.get_pr_tags.outputs.tags }}"
            if [[ "$tags" =~ "major" ]]; then bump_type="major"; fi
            if [[ "$tags" =~ "minor" ]]; then bump_type="minor"; fi
          else
            # Check for feat: and break: prefixes in commit messages
            commit_msg="${{ github.event.head_commit.message }}"
            if [[ "$commit_msg" == break:* ]]; then
              bump_type="major"
            elif [[ "$commit_msg" == feat:* ]]; then
              bump_type="minor"
            fi
          fi
          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT
      - name: bump package version
        id: version-bump
        run: |
          case "${{ inputs.language }}" in
            "python")
              poetry version ${{ steps.version-type.outputs.bump_type }}
              echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
              ;;
            "rust")
              cargo release ${{ steps.version-type.outputs.bump_type }} --execute --no-confirm
              echo "version=$(cargo metadata --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT
              ;;
            "js")
              pnpm version ${{ steps.version-type.outputs.bump_type }} --no-commit-hooks --no-git-tag-version
              echo "version=$(jq -r .version < package.json)" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unsupported language: ${{ inputs.language }}"
              exit 1
              ;;
          esac
      - name: commit changes
        uses: stefanzweifel/git-auto-commit-action@v6.0.1
        with:
          commit_message: |
            chore: incrementing version to ${{ steps.version-bump.outputs.version }}

            [skip ci]
